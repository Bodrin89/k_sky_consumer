
services:
  db_consumer:
    container_name: ru_you_db
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ru_you_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      timeout: 3s
      retries: 10
      interval: 3s
    networks:
      some_network:
        aliases:
          - consumer_container

  api_consumer:
    container_name: ru_you_api
    build: .
    depends_on:
      db_consumer:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - 8089:8089
    volumes:
      - ./:/code
      - ./static:/static
    command: [python, manage.py, runserver, 0.0.0.0:8089]
    entrypoint: [bash, entrypoint.sh]
    networks:
      some_network:
        aliases:
          - consumer_container

  kafka_consumer:
    container_name: ru_you_kafka_consumer
    build: .
    depends_on:
      db_consumer:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - 8080:8080
    volumes:
      - ./:/code
      - ./static:/static
    command: [python, manage.py, start_kafka_consumer]
#    entrypoint: [ bash, entrypoint.sh ]
    networks:
      some_network:
        aliases:
          - consumer_container

  redis:
    container_name: k_sky_redis
    image: redis
    restart: always
    env_file:
      - .env
    ports:
      - 6379:6379

    networks:
      some_network:
        aliases:
          - producer_container


  celery-worker:
    container_name: k_sky_celery_worker
    build: .
    restart: always
    env_file:
      - .env
    depends_on:
      db_consumer:
        condition: service_healthy
      api_consumer:
        condition: service_started
      redis:
        condition: service_started
    command: celery -A config worker --loglevel=info --logfile=/var/log/logfile_worker.log
    networks:
      some_network:
        aliases:
          - consumer_container

  celery-beat:
    container_name: k_sky_celery_beat
    build: .
    restart: always
    env_file:
      - .env
    depends_on:
      db_consumer:
        condition: service_healthy
      api_consumer:
        condition: service_started
      redis:
        condition: service_started
      celery-worker:
        condition: service_started
    command: celery -A config beat --loglevel=info --logfile=/var/log/logfile_beat.log
    networks:
      some_network:
        aliases:
          - consumer_container


networks:
    some_network:
        name: 'our_network'
volumes :
  ru_you_pg_data: